{"ast":null,"code":"import { useState as $AWxnT$useState, useRef as $AWxnT$useRef, useEffect as $AWxnT$useEffect, useMemo as $AWxnT$useMemo } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === \"touch\") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === \"undefined\") return;\n  if (typeof PointerEvent !== \"undefined\") document.addEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== \"undefined\") document.removeEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = (0, $AWxnT$useState)(false);\n  let state = (0, $AWxnT$useRef)({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: \"\",\n    target: null\n  }).current;\n  (0, $AWxnT$useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps,\n    triggerHoverEnd: triggerHoverEnd\n  } = (0, $AWxnT$useMemo)(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === \"touch\" || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: \"hoverstart\",\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = \"\";\n      state.target = null;\n      if (pointerType === \"touch\" || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: \"hoverend\",\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n    let hoverProps = {};\n    if (typeof PointerEvent !== \"undefined\") {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === \"mouse\") return;\n        triggerHoverStart(e, e.pointerType);\n      };\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, \"mouse\");\n        state.ignoreEmulatedMouseEvents = false;\n      };\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, \"mouse\");\n      };\n    }\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  (0, $AWxnT$useEffect)(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd({\n      currentTarget: state.target\n    }, state.pointerType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  };\n}\nexport { $6179b936705e76d3$export$ae780daf29e6d456 as useHover };","map":{"version":3,"names":["useState","$AWxnT$useState","useRef","$AWxnT$useRef","useEffect","$AWxnT$useEffect","useMemo","$AWxnT$useMemo","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","setTimeout","$6179b936705e76d3$var$handleGlobalPointerEvent","e","pointerType","$6179b936705e76d3$var$setupGlobalTouchEvents","document","PointerEvent","addEventListener","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","props","onHoverStart","onHoverChange","onHoverEnd","isDisabled","isHovered","setHovered","state","ignoreEmulatedMouseEvents","target","current","hoverProps","triggerHoverEnd","triggerHoverStart","event","currentTarget","contains","type","onPointerEnter","onPointerLeave","onTouchStart","onMouseEnter","onMouseLeave","useHover"],"sources":["/Users/development/Downloads/wastewise-master/node_modules/@react-aria/interactions/dist/useHover.mjs"],"sourcesContent":["import {useState as $AWxnT$useState, useRef as $AWxnT$useRef, useEffect as $AWxnT$useEffect, useMemo as $AWxnT$useMemo} from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n    // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n    // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n    // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n    // the distant future because a user previously touched the element.\n    setTimeout(()=>{\n        $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n    }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n    if (e.pointerType === \"touch\") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n    if (typeof document === \"undefined\") return;\n    if (typeof PointerEvent !== \"undefined\") document.addEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);\n    else document.addEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    $6179b936705e76d3$var$hoverCount++;\n    return ()=>{\n        $6179b936705e76d3$var$hoverCount--;\n        if ($6179b936705e76d3$var$hoverCount > 0) return;\n        if (typeof PointerEvent !== \"undefined\") document.removeEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);\n        else document.removeEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n    let { onHoverStart: onHoverStart, onHoverChange: onHoverChange, onHoverEnd: onHoverEnd, isDisabled: isDisabled } = props;\n    let [isHovered, setHovered] = (0, $AWxnT$useState)(false);\n    let state = (0, $AWxnT$useRef)({\n        isHovered: false,\n        ignoreEmulatedMouseEvents: false,\n        pointerType: \"\",\n        target: null\n    }).current;\n    (0, $AWxnT$useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n    let { hoverProps: hoverProps, triggerHoverEnd: triggerHoverEnd } = (0, $AWxnT$useMemo)(()=>{\n        let triggerHoverStart = (event, pointerType)=>{\n            state.pointerType = pointerType;\n            if (isDisabled || pointerType === \"touch\" || state.isHovered || !event.currentTarget.contains(event.target)) return;\n            state.isHovered = true;\n            let target = event.currentTarget;\n            state.target = target;\n            if (onHoverStart) onHoverStart({\n                type: \"hoverstart\",\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(true);\n            setHovered(true);\n        };\n        let triggerHoverEnd = (event, pointerType)=>{\n            state.pointerType = \"\";\n            state.target = null;\n            if (pointerType === \"touch\" || !state.isHovered) return;\n            state.isHovered = false;\n            let target = event.currentTarget;\n            if (onHoverEnd) onHoverEnd({\n                type: \"hoverend\",\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(false);\n            setHovered(false);\n        };\n        let hoverProps = {};\n        if (typeof PointerEvent !== \"undefined\") {\n            hoverProps.onPointerEnter = (e)=>{\n                if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === \"mouse\") return;\n                triggerHoverStart(e, e.pointerType);\n            };\n            hoverProps.onPointerLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n            };\n        } else {\n            hoverProps.onTouchStart = ()=>{\n                state.ignoreEmulatedMouseEvents = true;\n            };\n            hoverProps.onMouseEnter = (e)=>{\n                if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, \"mouse\");\n                state.ignoreEmulatedMouseEvents = false;\n            };\n            hoverProps.onMouseLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, \"mouse\");\n            };\n        }\n        return {\n            hoverProps: hoverProps,\n            triggerHoverEnd: triggerHoverEnd\n        };\n    }, [\n        onHoverStart,\n        onHoverChange,\n        onHoverEnd,\n        isDisabled,\n        state\n    ]);\n    (0, $AWxnT$useEffect)(()=>{\n        // Call the triggerHoverEnd as soon as isDisabled changes to true\n        // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n        if (isDisabled) triggerHoverEnd({\n            currentTarget: state.target\n        }, state.pointerType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isDisabled\n    ]);\n    return {\n        hoverProps: hoverProps,\n        isHovered: isHovered\n    };\n}\n\n\nexport {$6179b936705e76d3$export$ae780daf29e6d456 as useHover};\n//# sourceMappingURL=useHover.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}