{"ast":null,"code":"import { isAndroid as $c87311424ea30a05$export$a11b0059900ceec8 } from \"./platform.mjs\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $6a7db85432448f7f$export$60278871457622de(event) {\n  // JAWS/NVDA with Firefox.\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead\n  // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check\n  // to detect TalkBack virtual clicks.\n  if ((0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === \"click\" && event.buttons === 1;\n  return event.detail === 0 && !event.pointerType;\n}\nfunction $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n  // Talkback double tap from Windows Firefox touch screen press\n  return !(0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === \"mouse\";\n}\nexport { $6a7db85432448f7f$export$60278871457622de as isVirtualClick, $6a7db85432448f7f$export$29bf1b5f2c56cf63 as isVirtualPointerEvent };","map":{"version":3,"names":["isAndroid","$c87311424ea30a05$export$a11b0059900ceec8","$6a7db85432448f7f$export$60278871457622de","event","mozInputSource","isTrusted","pointerType","type","buttons","detail","$6a7db85432448f7f$export$29bf1b5f2c56cf63","width","height","pressure","isVirtualClick","isVirtualPointerEvent"],"sources":["/Users/development/Downloads/wastewise-master/node_modules/@react-aria/utils/dist/isVirtualEvent.mjs"],"sourcesContent":["import {isAndroid as $c87311424ea30a05$export$a11b0059900ceec8} from \"./platform.mjs\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nfunction $6a7db85432448f7f$export$60278871457622de(event) {\n    // JAWS/NVDA with Firefox.\n    if (event.mozInputSource === 0 && event.isTrusted) return true;\n    // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead\n    // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check\n    // to detect TalkBack virtual clicks.\n    if ((0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === \"click\" && event.buttons === 1;\n    return event.detail === 0 && !event.pointerType;\n}\nfunction $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {\n    // If the pointer size is zero, then we assume it's from a screen reader.\n    // Android TalkBack double tap will sometimes return a event with width and height of 1\n    // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n    // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n    // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n    // Talkback double tap from Windows Firefox touch screen press\n    return !(0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === \"mouse\";\n}\n\n\nexport {$6a7db85432448f7f$export$60278871457622de as isVirtualClick, $6a7db85432448f7f$export$29bf1b5f2c56cf63 as isVirtualPointerEvent};\n//# sourceMappingURL=isVirtualEvent.mjs.map\n"],"mappings":"AAAA,SAAQA,SAAS,IAAIC,yCAAyC,QAAO,gBAAgB;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,yCAAyCA,CAACC,KAAK,EAAE;EACtD;EACA,IAAIA,KAAK,CAACC,cAAc,KAAK,CAAC,IAAID,KAAK,CAACE,SAAS,EAAE,OAAO,IAAI;EAC9D;EACA;EACA;EACA,IAAI,CAAC,CAAC,EAAEJ,yCAAyC,EAAE,CAAC,IAAIE,KAAK,CAACG,WAAW,EAAE,OAAOH,KAAK,CAACI,IAAI,KAAK,OAAO,IAAIJ,KAAK,CAACK,OAAO,KAAK,CAAC;EAC/H,OAAOL,KAAK,CAACM,MAAM,KAAK,CAAC,IAAI,CAACN,KAAK,CAACG,WAAW;AACnD;AACA,SAASI,yCAAyCA,CAACP,KAAK,EAAE;EACtD;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,CAAC,CAAC,CAAC,EAAEF,yCAAyC,EAAE,CAAC,IAAIE,KAAK,CAACQ,KAAK,KAAK,CAAC,IAAIR,KAAK,CAACS,MAAM,KAAK,CAAC,IAAIT,KAAK,CAACQ,KAAK,KAAK,CAAC,IAAIR,KAAK,CAACS,MAAM,KAAK,CAAC,IAAIT,KAAK,CAACU,QAAQ,KAAK,CAAC,IAAIV,KAAK,CAACM,MAAM,KAAK,CAAC,IAAIN,KAAK,CAACG,WAAW,KAAK,OAAO;AACjO;AAGA,SAAQJ,yCAAyC,IAAIY,cAAc,EAAEJ,yCAAyC,IAAIK,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}